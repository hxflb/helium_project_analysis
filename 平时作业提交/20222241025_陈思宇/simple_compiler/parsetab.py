
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEQleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDEASSIGN COMMA DIVIDE ELSE EQ FLOAT GE GT ID IF INT LBRACE LE LPAREN LT MINUS MULTIPLY NEQ NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON VOID WHILEprogram : declaration_list statement_listdeclaration_list : declaration_list declaration\n                        | declarationdeclaration : var_declaration\n                   | fun_declarationvar_declaration : type_specifier ID SEMICOLONtype_specifier : INT\n                      | FLOAT\n                      | VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n              | VOID\n              | emptyparam_list : param_list COMMA param\n                  | paramparam : type_specifier IDcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : local_declarations var_declaration\n                          | emptystatement_list : statement_list statement\n                      | emptystatement : expression_stmt\n                 | compound_stmt\n                 | selection_stmt\n                 | iteration_stmt\n                 | return_stmtexpression_stmt : expression SEMICOLON\n                       | SEMICOLONselection_stmt : IF LPAREN expression RPAREN statement ELSE statement\n                      | IF LPAREN expression RPAREN statementiteration_stmt : WHILE LPAREN expression RPAREN statementreturn_stmt : RETURN SEMICOLON\n                   | RETURN expression SEMICOLONexpression : var ASSIGN expression\n                  | simple_expressionvar : IDsimple_expression : additive_expression relop additive_expression\n                         | additive_expressionrelop : LT\n             | LE\n             | GT\n             | GE\n             | EQ\n             | NEQadditive_expression : additive_expression addop term\n                           | termaddop : PLUS\n             | MINUSterm : term mulop factor\n            | factormulop : MULTIPLY\n             | DIVIDEfactor : LPAREN expression RPAREN\n              | var\n              | call\n              | NUMBERcall : ID LPAREN args RPARENargs : arg_list\n            | emptyarg_list : arg_list COMMA expression\n                | expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,11,22,35,36,38,39,67,84,85,91,],[7,7,-3,-4,-5,-2,-62,-6,7,7,-19,-18,7,-17,-10,]),'FLOAT':([0,2,3,4,5,11,22,35,36,38,39,67,84,85,91,],[8,8,-3,-4,-5,-2,-62,-6,8,8,-19,-18,8,-17,-10,]),'VOID':([0,2,3,4,5,11,22,35,36,38,39,67,84,85,91,],[9,9,-3,-4,-5,-2,-62,-6,63,9,-19,-18,9,-17,-10,]),'$end':([1,2,3,4,5,10,11,12,14,15,16,17,18,19,21,35,37,43,72,85,91,93,94,97,],[0,-62,-3,-4,-5,-1,-2,-21,-20,-22,-23,-24,-25,-26,-28,-6,-27,-32,-33,-17,-10,-30,-31,-29,]),'SEMICOLON':([2,3,4,5,10,11,12,13,14,15,16,17,18,19,20,21,22,26,27,28,29,30,31,32,33,34,35,37,38,39,43,44,66,67,70,72,73,78,79,80,81,85,86,87,88,89,91,93,94,96,97,],[-62,-3,-4,-5,21,-2,-21,35,-20,-22,-23,-24,-25,-26,37,-28,-62,43,-54,-35,-36,-38,-46,-50,-55,-56,-6,-27,-62,-19,-32,72,21,-18,-53,-33,-34,-37,-54,-45,-49,-17,35,21,21,-57,-10,-30,-31,21,-29,]),'LBRACE':([2,3,4,5,10,11,12,14,15,16,17,18,19,21,22,35,37,38,39,43,66,67,72,83,85,87,88,91,93,94,96,97,],[-62,-3,-4,-5,22,-2,-21,-20,-22,-23,-24,-25,-26,-28,-62,-6,-27,-62,-19,-32,22,-18,-33,22,-17,22,22,-10,-30,-31,22,-29,]),'IF':([2,3,4,5,10,11,12,14,15,16,17,18,19,21,22,35,37,38,39,43,66,67,72,85,87,88,91,93,94,96,97,],[-62,-3,-4,-5,23,-2,-21,-20,-22,-23,-24,-25,-26,-28,-62,-6,-27,-62,-19,-32,23,-18,-33,-17,23,23,-10,-30,-31,23,-29,]),'WHILE':([2,3,4,5,10,11,12,14,15,16,17,18,19,21,22,35,37,38,39,43,66,67,72,85,87,88,91,93,94,96,97,],[-62,-3,-4,-5,25,-2,-21,-20,-22,-23,-24,-25,-26,-28,-62,-6,-27,-62,-19,-32,25,-18,-33,-17,25,25,-10,-30,-31,25,-29,]),'RETURN':([2,3,4,5,10,11,12,14,15,16,17,18,19,21,22,35,37,38,39,43,66,67,72,85,87,88,91,93,94,96,97,],[-62,-3,-4,-5,26,-2,-21,-20,-22,-23,-24,-25,-26,-28,-62,-6,-27,-62,-19,-32,26,-18,-33,-17,26,26,-10,-30,-31,26,-29,]),'ID':([2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,21,22,24,26,35,37,38,39,40,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,66,67,68,72,85,87,88,90,91,93,94,96,97,],[-62,-3,-4,-5,13,-7,-8,-9,29,-2,-21,-20,-22,-23,-24,-25,-26,-28,-62,29,29,-6,-27,-62,-19,29,29,-32,29,29,29,29,-39,-40,-41,-42,-43,-44,-47,-48,29,-51,-52,82,-9,29,-18,86,-33,-17,29,29,29,-10,-30,-31,29,-29,]),'LPAREN':([2,3,4,5,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,29,35,37,38,39,40,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,66,67,72,85,87,88,90,91,93,94,96,97,],[-62,-3,-4,-5,24,-2,-21,36,-20,-22,-23,-24,-25,-26,-28,-62,40,24,42,24,46,-6,-27,-62,-19,24,24,-32,24,24,24,24,-39,-40,-41,-42,-43,-44,-47,-48,24,-51,-52,24,-18,-33,-17,24,24,24,-10,-30,-31,24,-29,]),'NUMBER':([2,3,4,5,10,11,12,14,15,16,17,18,19,21,22,24,26,35,37,38,39,40,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,66,67,72,85,87,88,90,91,93,94,96,97,],[-62,-3,-4,-5,34,-2,-21,-20,-22,-23,-24,-25,-26,-28,-62,34,34,-6,-27,-62,-19,34,34,-32,34,34,34,34,-39,-40,-41,-42,-43,-44,-47,-48,34,-51,-52,34,-18,-33,-17,34,34,34,-10,-30,-31,34,-29,]),'RBRACE':([12,14,15,16,17,18,19,21,22,35,37,38,39,43,66,67,72,85,93,94,97,],[-21,-20,-22,-23,-24,-25,-26,-28,-62,-6,-27,-62,-19,-32,85,-18,-33,-17,-30,-31,-29,]),'ELSE':([15,16,17,18,19,21,37,43,72,85,93,94,97,],[-22,-23,-24,-25,-26,-28,-27,-32,-33,-17,96,-31,-29,]),'ASSIGN':([27,29,],[45,-36,]),'MULTIPLY':([27,29,31,32,33,34,70,79,80,81,89,],[-54,-36,58,-50,-55,-56,-53,-54,58,-49,-57,]),'DIVIDE':([27,29,31,32,33,34,70,79,80,81,89,],[-54,-36,59,-50,-55,-56,-53,-54,59,-49,-57,]),'LT':([27,29,30,31,32,33,34,70,79,80,81,89,],[-54,-36,49,-46,-50,-55,-56,-53,-54,-45,-49,-57,]),'LE':([27,29,30,31,32,33,34,70,79,80,81,89,],[-54,-36,50,-46,-50,-55,-56,-53,-54,-45,-49,-57,]),'GT':([27,29,30,31,32,33,34,70,79,80,81,89,],[-54,-36,51,-46,-50,-55,-56,-53,-54,-45,-49,-57,]),'GE':([27,29,30,31,32,33,34,70,79,80,81,89,],[-54,-36,52,-46,-50,-55,-56,-53,-54,-45,-49,-57,]),'EQ':([27,29,30,31,32,33,34,70,79,80,81,89,],[-54,-36,53,-46,-50,-55,-56,-53,-54,-45,-49,-57,]),'NEQ':([27,29,30,31,32,33,34,70,79,80,81,89,],[-54,-36,54,-46,-50,-55,-56,-53,-54,-45,-49,-57,]),'PLUS':([27,29,30,31,32,33,34,70,78,79,80,81,89,],[-54,-36,55,-46,-50,-55,-56,-53,55,-54,-45,-49,-57,]),'MINUS':([27,29,30,31,32,33,34,70,78,79,80,81,89,],[-54,-36,56,-46,-50,-55,-56,-53,56,-54,-45,-49,-57,]),'RPAREN':([27,28,29,30,31,32,33,34,36,41,46,61,62,63,64,65,69,70,71,73,74,75,76,77,78,79,80,81,82,89,92,95,],[-54,-35,-36,-38,-46,-50,-55,-56,-62,70,-62,83,-11,-12,-13,-15,87,-53,88,-34,89,-58,-59,-61,-37,-54,-45,-49,-16,-57,-14,-60,]),'COMMA':([27,28,29,30,31,32,33,34,62,65,70,73,75,77,78,79,80,81,82,89,92,95,],[-54,-35,-36,-38,-46,-50,-55,-56,84,-15,-53,-34,90,-61,-37,-54,-45,-49,-16,-57,-14,-60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,11,]),'var_declaration':([0,2,38,],[4,4,67,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,36,38,84,],[6,6,60,68,60,]),'statement_list':([2,38,],[10,66,]),'empty':([2,22,36,38,46,],[12,39,64,12,76,]),'statement':([10,66,87,88,96,],[14,14,93,94,97,]),'expression_stmt':([10,66,87,88,96,],[15,15,15,15,15,]),'compound_stmt':([10,66,83,87,88,96,],[16,16,91,16,16,16,]),'selection_stmt':([10,66,87,88,96,],[17,17,17,17,17,]),'iteration_stmt':([10,66,87,88,96,],[18,18,18,18,18,]),'return_stmt':([10,66,87,88,96,],[19,19,19,19,19,]),'expression':([10,24,26,40,42,45,46,66,87,88,90,96,],[20,41,44,69,71,73,77,20,20,20,95,20,]),'var':([10,24,26,40,42,45,46,47,48,57,66,87,88,90,96,],[27,27,27,27,27,27,27,79,79,79,27,27,27,27,27,]),'simple_expression':([10,24,26,40,42,45,46,66,87,88,90,96,],[28,28,28,28,28,28,28,28,28,28,28,28,]),'additive_expression':([10,24,26,40,42,45,46,47,66,87,88,90,96,],[30,30,30,30,30,30,30,78,30,30,30,30,30,]),'term':([10,24,26,40,42,45,46,47,48,66,87,88,90,96,],[31,31,31,31,31,31,31,31,80,31,31,31,31,31,]),'factor':([10,24,26,40,42,45,46,47,48,57,66,87,88,90,96,],[32,32,32,32,32,32,32,32,32,81,32,32,32,32,32,]),'call':([10,24,26,40,42,45,46,47,48,57,66,87,88,90,96,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'local_declarations':([22,],[38,]),'relop':([30,],[47,]),'addop':([30,78,],[48,48,]),'mulop':([31,80,],[57,57,]),'params':([36,],[61,]),'param_list':([36,],[62,]),'param':([36,84,],[65,92,]),'args':([46,],[74,]),'arg_list':([46,],[75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list statement_list','program',2,'p_program','compiler_parser.py',31),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','compiler_parser.py',36),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','compiler_parser.py',37),
  ('declaration -> var_declaration','declaration',1,'p_declaration','compiler_parser.py',44),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','compiler_parser.py',45),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','compiler_parser.py',49),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','compiler_parser.py',55),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','compiler_parser.py',56),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','compiler_parser.py',57),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','compiler_parser.py',62),
  ('params -> param_list','params',1,'p_params','compiler_parser.py',68),
  ('params -> VOID','params',1,'p_params','compiler_parser.py',69),
  ('params -> empty','params',1,'p_params','compiler_parser.py',70),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','compiler_parser.py',77),
  ('param_list -> param','param_list',1,'p_param_list','compiler_parser.py',78),
  ('param -> type_specifier ID','param',2,'p_param','compiler_parser.py',85),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','compiler_parser.py',91),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','compiler_parser.py',96),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','compiler_parser.py',97),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','compiler_parser.py',104),
  ('statement_list -> empty','statement_list',1,'p_statement_list','compiler_parser.py',105),
  ('statement -> expression_stmt','statement',1,'p_statement','compiler_parser.py',112),
  ('statement -> compound_stmt','statement',1,'p_statement','compiler_parser.py',113),
  ('statement -> selection_stmt','statement',1,'p_statement','compiler_parser.py',114),
  ('statement -> iteration_stmt','statement',1,'p_statement','compiler_parser.py',115),
  ('statement -> return_stmt','statement',1,'p_statement','compiler_parser.py',116),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','compiler_parser.py',120),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','compiler_parser.py',121),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt','compiler_parser.py',129),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt','compiler_parser.py',130),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','compiler_parser.py',139),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','compiler_parser.py',144),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','compiler_parser.py',145),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','compiler_parser.py',153),
  ('expression -> simple_expression','expression',1,'p_expression','compiler_parser.py',154),
  ('var -> ID','var',1,'p_var','compiler_parser.py',162),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','compiler_parser.py',168),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','compiler_parser.py',169),
  ('relop -> LT','relop',1,'p_relop','compiler_parser.py',176),
  ('relop -> LE','relop',1,'p_relop','compiler_parser.py',177),
  ('relop -> GT','relop',1,'p_relop','compiler_parser.py',178),
  ('relop -> GE','relop',1,'p_relop','compiler_parser.py',179),
  ('relop -> EQ','relop',1,'p_relop','compiler_parser.py',180),
  ('relop -> NEQ','relop',1,'p_relop','compiler_parser.py',181),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','compiler_parser.py',185),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','compiler_parser.py',186),
  ('addop -> PLUS','addop',1,'p_addop','compiler_parser.py',193),
  ('addop -> MINUS','addop',1,'p_addop','compiler_parser.py',194),
  ('term -> term mulop factor','term',3,'p_term','compiler_parser.py',198),
  ('term -> factor','term',1,'p_term','compiler_parser.py',199),
  ('mulop -> MULTIPLY','mulop',1,'p_mulop','compiler_parser.py',206),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','compiler_parser.py',207),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','compiler_parser.py',211),
  ('factor -> var','factor',1,'p_factor','compiler_parser.py',212),
  ('factor -> call','factor',1,'p_factor','compiler_parser.py',213),
  ('factor -> NUMBER','factor',1,'p_factor','compiler_parser.py',214),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','compiler_parser.py',227),
  ('args -> arg_list','args',1,'p_args','compiler_parser.py',233),
  ('args -> empty','args',1,'p_args','compiler_parser.py',234),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','compiler_parser.py',241),
  ('arg_list -> expression','arg_list',1,'p_arg_list','compiler_parser.py',242),
  ('empty -> <empty>','empty',0,'p_empty','compiler_parser.py',249),
]
